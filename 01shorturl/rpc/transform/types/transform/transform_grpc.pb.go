// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.1
// source: transform.proto

package transform

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TransformClient is the client API for Transform service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransformClient interface {
	// 根据真实的url返回短连接
	GetShortLinkByRealUrl(ctx context.Context, in *RealUrlToShortLinkReq, opts ...grpc.CallOption) (*RealUrlToShortLinkResp, error)
	// 根据短连接返回真实的url
	GetRealUrlByShortLink(ctx context.Context, in *ShortLinkToRealUrlReq, opts ...grpc.CallOption) (*ShortLinkToRealUrlResp, error)
}

type transformClient struct {
	cc grpc.ClientConnInterface
}

func NewTransformClient(cc grpc.ClientConnInterface) TransformClient {
	return &transformClient{cc}
}

func (c *transformClient) GetShortLinkByRealUrl(ctx context.Context, in *RealUrlToShortLinkReq, opts ...grpc.CallOption) (*RealUrlToShortLinkResp, error) {
	out := new(RealUrlToShortLinkResp)
	err := c.cc.Invoke(ctx, "/transform.transform/GetShortLinkByRealUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transformClient) GetRealUrlByShortLink(ctx context.Context, in *ShortLinkToRealUrlReq, opts ...grpc.CallOption) (*ShortLinkToRealUrlResp, error) {
	out := new(ShortLinkToRealUrlResp)
	err := c.cc.Invoke(ctx, "/transform.transform/GetRealUrlByShortLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransformServer is the server API for Transform service.
// All implementations must embed UnimplementedTransformServer
// for forward compatibility
type TransformServer interface {
	// 根据真实的url返回短连接
	GetShortLinkByRealUrl(context.Context, *RealUrlToShortLinkReq) (*RealUrlToShortLinkResp, error)
	// 根据短连接返回真实的url
	GetRealUrlByShortLink(context.Context, *ShortLinkToRealUrlReq) (*ShortLinkToRealUrlResp, error)
	mustEmbedUnimplementedTransformServer()
}

// UnimplementedTransformServer must be embedded to have forward compatible implementations.
type UnimplementedTransformServer struct {
}

func (UnimplementedTransformServer) GetShortLinkByRealUrl(context.Context, *RealUrlToShortLinkReq) (*RealUrlToShortLinkResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShortLinkByRealUrl not implemented")
}
func (UnimplementedTransformServer) GetRealUrlByShortLink(context.Context, *ShortLinkToRealUrlReq) (*ShortLinkToRealUrlResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRealUrlByShortLink not implemented")
}
func (UnimplementedTransformServer) mustEmbedUnimplementedTransformServer() {}

// UnsafeTransformServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransformServer will
// result in compilation errors.
type UnsafeTransformServer interface {
	mustEmbedUnimplementedTransformServer()
}

func RegisterTransformServer(s grpc.ServiceRegistrar, srv TransformServer) {
	s.RegisterService(&Transform_ServiceDesc, srv)
}

func _Transform_GetShortLinkByRealUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RealUrlToShortLinkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransformServer).GetShortLinkByRealUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transform.transform/GetShortLinkByRealUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransformServer).GetShortLinkByRealUrl(ctx, req.(*RealUrlToShortLinkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transform_GetRealUrlByShortLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortLinkToRealUrlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransformServer).GetRealUrlByShortLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transform.transform/GetRealUrlByShortLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransformServer).GetRealUrlByShortLink(ctx, req.(*ShortLinkToRealUrlReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Transform_ServiceDesc is the grpc.ServiceDesc for Transform service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Transform_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "transform.transform",
	HandlerType: (*TransformServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetShortLinkByRealUrl",
			Handler:    _Transform_GetShortLinkByRealUrl_Handler,
		},
		{
			MethodName: "GetRealUrlByShortLink",
			Handler:    _Transform_GetRealUrlByShortLink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transform.proto",
}
